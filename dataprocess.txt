DOWNLOAD

if(!file.exists("data")){
  dir.create("data")
}

download: parameters
url, destfile, method

https://data.baltimorecity.gov/Transportation/Baltimore-Fixed-Speed-Cameras/dz54-2aru

https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD

fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.csv", method = "curl")
list.files("./data")

dateDownloaded <-date()
dateDownloaded

READING FLATFILE

read.table()
parameters: file, header,sep, row.names, nrows

cameraData <- read.table("cameras.csv", sep=",", header="TRUE")

read.csv is also fine no need to mention other parameters.

quote =""
na.strings : charaters to missing value : something line 9999 etc.
nrows
skip


READING EXCEL FILE

fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xls?accessType=DOWNLOAD"
download.file(fileUrl, destfile ="./data/cameras.xlsx", method="curl")
dateDownloaded <- date()

library(xlsx)
colIndex <- 2:3
rowIndex <- 1:4
cameraData <-read.xlsx("./data/cameras.xlsx", sheetIndex=1, colIndex=colIndex, rowIndex=rowIndex)

write.xlsx : to write back

read.xlsx2 is another method.More faster
XLConnect is a good package with more options to manipulate the data
XLConnect vignette is a good place to do some reasearch

READING XML

Components
- Markup: lables that give the text structure
- Content : The actual text

load(XML)
fileUrl <- https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xml?accessType=DOWNLOAD
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)

names(rootNodes)

rootNode[[1]] access the first element
rootNode[[1]][[1]]: retrives just the name element

xmlSApply(rootNode, xmlValue)

use Xpath is the best
http://www.stat.berkeley.edu/~statcur

/node Top level

xpathSApply(rootNode, "//name", xmlValue)

Little more complicated example with URL
http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens
look a the source code

fileUrl()
doc <- htmlTreeParse(fileUrl, useInternal=TRUE)
scores<- xpathSApply(doc, //li[@class='score']", xmlValue)
teams<- xpathSApply(doc,"//li[@class=team-name']", xmlValue)
scores
teams

READING JSON DATA 

https://api.github.com/users/jtleek/repos

library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)

myjson <- toJSON(iris, pretty=TRUE)
cat(myjson)

to reverse

iris1 <- fromJSON(myjson)


DATA TABLE PACKAGE

library(data.table)
DF=data.frame(x=rnorm(9), y=rep(c("a","b","c"), each=3), z= rnorm(9))

tables()
NAMES, NROW, MB, COLS, KEY

DT[, list(mean(x), sum(z))]

DT[, W:=z^2] will add another column of Z with new squared value

DT[, b:mean(x+w), by=a]
.N an integer


set.seed(123);
DT <- data.table(x=sample(letters[1:3], 1E5, TRUE))
DT[, .N, by=x]

setkey(DT, x)
DT['a'] quite faster

DT1 <-
DT2<- 
